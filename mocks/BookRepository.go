// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models " hery-ciaputra/demo-gin/models"
	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// AddNewBook provides a mock function with given fields: book
func (_m *BookRepository) AddNewBook(book *models.Book) (*models.Book, int, error) {
	ret := _m.Called(book)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(*models.Book) *models.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.Book) int); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Book) error); ok {
		r2 = rf(book)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindBook provides a mock function with given fields:
func (_m *BookRepository) FindBook() ([]*models.Book, error) {
	ret := _m.Called()

	var r0 []*models.Book
	if rf, ok := ret.Get(0).(func() []*models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: m
func (_m *BookRepository) Save(m *models.Book) (*models.Book, int, error) {
	ret := _m.Called(m)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(*models.Book) *models.Book); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.Book) int); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Book) error); ok {
		r2 = rf(m)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
