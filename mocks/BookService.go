// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto " hery-ciaputra/demo-gin/dto"
	mock "github.com/stretchr/testify/mock"

	models " hery-ciaputra/demo-gin/models"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// AddNewBook provides a mock function with given fields: payload
func (_m *BookService) AddNewBook(payload *dto.BookReq) (*dto.BookRes, error) {
	ret := _m.Called(payload)

	var r0 *dto.BookRes
	if rf, ok := ret.Get(0).(func(*dto.BookReq) *dto.BookRes); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BookRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.BookReq) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with given fields:
func (_m *BookService) GetAllBooks() ([]*models.Book, error) {
	ret := _m.Called()

	var r0 []*models.Book
	if rf, ok := ret.Get(0).(func() []*models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookService(t mockConstructorTestingTNewBookService) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
